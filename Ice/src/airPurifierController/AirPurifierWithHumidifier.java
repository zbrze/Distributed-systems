//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `airPruifier.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package airPurifierController;

public interface AirPurifierWithHumidifier extends AirPurifier
{
    int getHumidityPercentage(com.zeroc.Ice.Current current)
        throws TurnedOffException;

    int getWaterTankLevel(com.zeroc.Ice.Current current);

    void refillTank(com.zeroc.Ice.Current current);

    void turnOnHumidifierMode(com.zeroc.Ice.Current current)
        throws EmptyWaterTankException;

    void turnOffHumidifierMode(com.zeroc.Ice.Current current);

    boolean isHumidifierTurnedOn(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::airPurifierController::AirPurifier",
        "::airPurifierController::AirPurifierWithHumidifier"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::airPurifierController::AirPurifierWithHumidifier";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getHumidityPercentage(AirPurifierWithHumidifier obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        int ret = obj.getHumidityPercentage(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getWaterTankLevel(AirPurifierWithHumidifier obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        int ret = obj.getWaterTankLevel(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_refillTank(AirPurifierWithHumidifier obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        obj.refillTank(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_turnOnHumidifierMode(AirPurifierWithHumidifier obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        obj.turnOnHumidifierMode(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_turnOffHumidifierMode(AirPurifierWithHumidifier obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        obj.turnOffHumidifierMode(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_isHumidifierTurnedOn(AirPurifierWithHumidifier obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        boolean ret = obj.isHumidifierTurnedOn(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "changeFilter",
        "getCurentAirQuality",
        "getCurrentPowerLevel",
        "getFilterWearPercentage",
        "getHumidityPercentage",
        "getWaterTankLevel",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "isHumidifierTurnedOn",
        "refillTank",
        "setCurrentPower",
        "turnOffHumidifierMode",
        "turnOnHumidifierMode"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return AirPurifier._iceD_changeFilter(this, in, current);
            }
            case 1:
            {
                return AirPurifier._iceD_getCurentAirQuality(this, in, current);
            }
            case 2:
            {
                return AirPurifier._iceD_getCurrentPowerLevel(this, in, current);
            }
            case 3:
            {
                return AirPurifier._iceD_getFilterWearPercentage(this, in, current);
            }
            case 4:
            {
                return _iceD_getHumidityPercentage(this, in, current);
            }
            case 5:
            {
                return _iceD_getWaterTankLevel(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 8:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 9:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 10:
            {
                return _iceD_isHumidifierTurnedOn(this, in, current);
            }
            case 11:
            {
                return _iceD_refillTank(this, in, current);
            }
            case 12:
            {
                return AirPurifier._iceD_setCurrentPower(this, in, current);
            }
            case 13:
            {
                return _iceD_turnOffHumidifierMode(this, in, current);
            }
            case 14:
            {
                return _iceD_turnOnHumidifierMode(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
