# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.7
#
# <auto-generated>
#
# Generated from file `airPruifier.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module airPurifierController
_M_airPurifierController = Ice.openModule('airPurifierController')
__name__ = 'airPurifierController'

if 'airQuality' not in _M_airPurifierController.__dict__:
    _M_airPurifierController.airQuality = Ice.createTempClass()
    class airQuality(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    airQuality.GOOD = airQuality("GOOD", 0)
    airQuality.MODERATE = airQuality("MODERATE", 1)
    airQuality.UNHEALTHY = airQuality("UNHEALTHY", 2)
    airQuality._enumerators = { 0:airQuality.GOOD, 1:airQuality.MODERATE, 2:airQuality.UNHEALTHY }

    _M_airPurifierController._t_airQuality = IcePy.defineEnum('::airPurifierController::airQuality', airQuality, (), airQuality._enumerators)

    _M_airPurifierController.airQuality = airQuality
    del airQuality

if 'powerLevel' not in _M_airPurifierController.__dict__:
    _M_airPurifierController.powerLevel = Ice.createTempClass()
    class powerLevel(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    powerLevel.LOW = powerLevel("LOW", 1)
    powerLevel.MEDIUM = powerLevel("MEDIUM", 2)
    powerLevel.HIGH = powerLevel("HIGH", 3)
    powerLevel._enumerators = { 1:powerLevel.LOW, 2:powerLevel.MEDIUM, 3:powerLevel.HIGH }

    _M_airPurifierController._t_powerLevel = IcePy.defineEnum('::airPurifierController::powerLevel', powerLevel, (), powerLevel._enumerators)

    _M_airPurifierController.powerLevel = powerLevel
    del powerLevel

if 'WornoutFilterException' not in _M_airPurifierController.__dict__:
    _M_airPurifierController.WornoutFilterException = Ice.createTempClass()
    class WornoutFilterException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::airPurifierController::WornoutFilterException'

    _M_airPurifierController._t_WornoutFilterException = IcePy.defineException('::airPurifierController::WornoutFilterException', WornoutFilterException, (), False, None, ())
    WornoutFilterException._ice_type = _M_airPurifierController._t_WornoutFilterException

    _M_airPurifierController.WornoutFilterException = WornoutFilterException
    del WornoutFilterException

if 'IncorrectInputException' not in _M_airPurifierController.__dict__:
    _M_airPurifierController.IncorrectInputException = Ice.createTempClass()
    class IncorrectInputException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::airPurifierController::IncorrectInputException'

    _M_airPurifierController._t_IncorrectInputException = IcePy.defineException('::airPurifierController::IncorrectInputException', IncorrectInputException, (), False, None, ())
    IncorrectInputException._ice_type = _M_airPurifierController._t_IncorrectInputException

    _M_airPurifierController.IncorrectInputException = IncorrectInputException
    del IncorrectInputException

if 'TurnedOffException' not in _M_airPurifierController.__dict__:
    _M_airPurifierController.TurnedOffException = Ice.createTempClass()
    class TurnedOffException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::airPurifierController::TurnedOffException'

    _M_airPurifierController._t_TurnedOffException = IcePy.defineException('::airPurifierController::TurnedOffException', TurnedOffException, (), False, None, ())
    TurnedOffException._ice_type = _M_airPurifierController._t_TurnedOffException

    _M_airPurifierController.TurnedOffException = TurnedOffException
    del TurnedOffException

if 'EmptyWaterTankException' not in _M_airPurifierController.__dict__:
    _M_airPurifierController.EmptyWaterTankException = Ice.createTempClass()
    class EmptyWaterTankException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::airPurifierController::EmptyWaterTankException'

    _M_airPurifierController._t_EmptyWaterTankException = IcePy.defineException('::airPurifierController::EmptyWaterTankException', EmptyWaterTankException, (), False, None, ())
    EmptyWaterTankException._ice_type = _M_airPurifierController._t_EmptyWaterTankException

    _M_airPurifierController.EmptyWaterTankException = EmptyWaterTankException
    del EmptyWaterTankException

_M_airPurifierController._t_AirPurifier = IcePy.defineValue('::airPurifierController::AirPurifier', Ice.Value, -1, (), False, True, None, ())

if 'AirPurifierPrx' not in _M_airPurifierController.__dict__:
    _M_airPurifierController.AirPurifierPrx = Ice.createTempClass()
    class AirPurifierPrx(Ice.ObjectPrx):

        def getCurrentPowerLevel(self, context=None):
            return _M_airPurifierController.AirPurifier._op_getCurrentPowerLevel.invoke(self, ((), context))

        def getCurrentPowerLevelAsync(self, context=None):
            return _M_airPurifierController.AirPurifier._op_getCurrentPowerLevel.invokeAsync(self, ((), context))

        def begin_getCurrentPowerLevel(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_airPurifierController.AirPurifier._op_getCurrentPowerLevel.begin(self, ((), _response, _ex, _sent, context))

        def end_getCurrentPowerLevel(self, _r):
            return _M_airPurifierController.AirPurifier._op_getCurrentPowerLevel.end(self, _r)

        def changeFilter(self, context=None):
            return _M_airPurifierController.AirPurifier._op_changeFilter.invoke(self, ((), context))

        def changeFilterAsync(self, context=None):
            return _M_airPurifierController.AirPurifier._op_changeFilter.invokeAsync(self, ((), context))

        def begin_changeFilter(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_airPurifierController.AirPurifier._op_changeFilter.begin(self, ((), _response, _ex, _sent, context))

        def end_changeFilter(self, _r):
            return _M_airPurifierController.AirPurifier._op_changeFilter.end(self, _r)

        def getFilterWearPercentage(self, context=None):
            return _M_airPurifierController.AirPurifier._op_getFilterWearPercentage.invoke(self, ((), context))

        def getFilterWearPercentageAsync(self, context=None):
            return _M_airPurifierController.AirPurifier._op_getFilterWearPercentage.invokeAsync(self, ((), context))

        def begin_getFilterWearPercentage(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_airPurifierController.AirPurifier._op_getFilterWearPercentage.begin(self, ((), _response, _ex, _sent, context))

        def end_getFilterWearPercentage(self, _r):
            return _M_airPurifierController.AirPurifier._op_getFilterWearPercentage.end(self, _r)

        def setCurrentPower(self, powerLevel, context=None):
            return _M_airPurifierController.AirPurifier._op_setCurrentPower.invoke(self, ((powerLevel, ), context))

        def setCurrentPowerAsync(self, powerLevel, context=None):
            return _M_airPurifierController.AirPurifier._op_setCurrentPower.invokeAsync(self, ((powerLevel, ), context))

        def begin_setCurrentPower(self, powerLevel, _response=None, _ex=None, _sent=None, context=None):
            return _M_airPurifierController.AirPurifier._op_setCurrentPower.begin(self, ((powerLevel, ), _response, _ex, _sent, context))

        def end_setCurrentPower(self, _r):
            return _M_airPurifierController.AirPurifier._op_setCurrentPower.end(self, _r)

        def getCurentAirQuality(self, context=None):
            return _M_airPurifierController.AirPurifier._op_getCurentAirQuality.invoke(self, ((), context))

        def getCurentAirQualityAsync(self, context=None):
            return _M_airPurifierController.AirPurifier._op_getCurentAirQuality.invokeAsync(self, ((), context))

        def begin_getCurentAirQuality(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_airPurifierController.AirPurifier._op_getCurentAirQuality.begin(self, ((), _response, _ex, _sent, context))

        def end_getCurentAirQuality(self, _r):
            return _M_airPurifierController.AirPurifier._op_getCurentAirQuality.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_airPurifierController.AirPurifierPrx.ice_checkedCast(proxy, '::airPurifierController::AirPurifier', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_airPurifierController.AirPurifierPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::airPurifierController::AirPurifier'
    _M_airPurifierController._t_AirPurifierPrx = IcePy.defineProxy('::airPurifierController::AirPurifier', AirPurifierPrx)

    _M_airPurifierController.AirPurifierPrx = AirPurifierPrx
    del AirPurifierPrx

    _M_airPurifierController.AirPurifier = Ice.createTempClass()
    class AirPurifier(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::airPurifierController::AirPurifier')

        def ice_id(self, current=None):
            return '::airPurifierController::AirPurifier'

        @staticmethod
        def ice_staticId():
            return '::airPurifierController::AirPurifier'

        def getCurrentPowerLevel(self, current=None):
            raise NotImplementedError("servant method 'getCurrentPowerLevel' not implemented")

        def changeFilter(self, current=None):
            raise NotImplementedError("servant method 'changeFilter' not implemented")

        def getFilterWearPercentage(self, current=None):
            raise NotImplementedError("servant method 'getFilterWearPercentage' not implemented")

        def setCurrentPower(self, powerLevel, current=None):
            raise NotImplementedError("servant method 'setCurrentPower' not implemented")

        def getCurentAirQuality(self, current=None):
            raise NotImplementedError("servant method 'getCurentAirQuality' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_airPurifierController._t_AirPurifierDisp)

        __repr__ = __str__

    _M_airPurifierController._t_AirPurifierDisp = IcePy.defineClass('::airPurifierController::AirPurifier', AirPurifier, (), None, ())
    AirPurifier._ice_type = _M_airPurifierController._t_AirPurifierDisp

    AirPurifier._op_getCurrentPowerLevel = IcePy.Operation('getCurrentPowerLevel', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_airPurifierController._t_powerLevel, False, 0), ())
    AirPurifier._op_changeFilter = IcePy.Operation('changeFilter', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    AirPurifier._op_getFilterWearPercentage = IcePy.Operation('getFilterWearPercentage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    AirPurifier._op_setCurrentPower = IcePy.Operation('setCurrentPower', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_airPurifierController._t_powerLevel, False, 0),), (), None, (_M_airPurifierController._t_WornoutFilterException,))
    AirPurifier._op_getCurentAirQuality = IcePy.Operation('getCurentAirQuality', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_airPurifierController._t_airQuality, False, 0), ())

    _M_airPurifierController.AirPurifier = AirPurifier
    del AirPurifier

_M_airPurifierController._t_AirPurifierWithHumidifier = IcePy.defineValue('::airPurifierController::AirPurifierWithHumidifier', Ice.Value, -1, (), False, True, None, ())

if 'AirPurifierWithHumidifierPrx' not in _M_airPurifierController.__dict__:
    _M_airPurifierController.AirPurifierWithHumidifierPrx = Ice.createTempClass()
    class AirPurifierWithHumidifierPrx(_M_airPurifierController.AirPurifierPrx):

        def getHumidityPercentage(self, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_getHumidityPercentage.invoke(self, ((), context))

        def getHumidityPercentageAsync(self, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_getHumidityPercentage.invokeAsync(self, ((), context))

        def begin_getHumidityPercentage(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_getHumidityPercentage.begin(self, ((), _response, _ex, _sent, context))

        def end_getHumidityPercentage(self, _r):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_getHumidityPercentage.end(self, _r)

        def getWaterTankLevel(self, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_getWaterTankLevel.invoke(self, ((), context))

        def getWaterTankLevelAsync(self, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_getWaterTankLevel.invokeAsync(self, ((), context))

        def begin_getWaterTankLevel(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_getWaterTankLevel.begin(self, ((), _response, _ex, _sent, context))

        def end_getWaterTankLevel(self, _r):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_getWaterTankLevel.end(self, _r)

        def refillTank(self, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_refillTank.invoke(self, ((), context))

        def refillTankAsync(self, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_refillTank.invokeAsync(self, ((), context))

        def begin_refillTank(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_refillTank.begin(self, ((), _response, _ex, _sent, context))

        def end_refillTank(self, _r):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_refillTank.end(self, _r)

        def turnOnHumidifierMode(self, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_turnOnHumidifierMode.invoke(self, ((), context))

        def turnOnHumidifierModeAsync(self, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_turnOnHumidifierMode.invokeAsync(self, ((), context))

        def begin_turnOnHumidifierMode(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_turnOnHumidifierMode.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOnHumidifierMode(self, _r):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_turnOnHumidifierMode.end(self, _r)

        def turnOffHumidifierMode(self, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_turnOffHumidifierMode.invoke(self, ((), context))

        def turnOffHumidifierModeAsync(self, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_turnOffHumidifierMode.invokeAsync(self, ((), context))

        def begin_turnOffHumidifierMode(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_turnOffHumidifierMode.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOffHumidifierMode(self, _r):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_turnOffHumidifierMode.end(self, _r)

        def isHumidifierTurnedOn(self, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_isHumidifierTurnedOn.invoke(self, ((), context))

        def isHumidifierTurnedOnAsync(self, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_isHumidifierTurnedOn.invokeAsync(self, ((), context))

        def begin_isHumidifierTurnedOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_isHumidifierTurnedOn.begin(self, ((), _response, _ex, _sent, context))

        def end_isHumidifierTurnedOn(self, _r):
            return _M_airPurifierController.AirPurifierWithHumidifier._op_isHumidifierTurnedOn.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_airPurifierController.AirPurifierWithHumidifierPrx.ice_checkedCast(proxy, '::airPurifierController::AirPurifierWithHumidifier', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_airPurifierController.AirPurifierWithHumidifierPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::airPurifierController::AirPurifierWithHumidifier'
    _M_airPurifierController._t_AirPurifierWithHumidifierPrx = IcePy.defineProxy('::airPurifierController::AirPurifierWithHumidifier', AirPurifierWithHumidifierPrx)

    _M_airPurifierController.AirPurifierWithHumidifierPrx = AirPurifierWithHumidifierPrx
    del AirPurifierWithHumidifierPrx

    _M_airPurifierController.AirPurifierWithHumidifier = Ice.createTempClass()
    class AirPurifierWithHumidifier(_M_airPurifierController.AirPurifier):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::airPurifierController::AirPurifier', '::airPurifierController::AirPurifierWithHumidifier')

        def ice_id(self, current=None):
            return '::airPurifierController::AirPurifierWithHumidifier'

        @staticmethod
        def ice_staticId():
            return '::airPurifierController::AirPurifierWithHumidifier'

        def getHumidityPercentage(self, current=None):
            raise NotImplementedError("servant method 'getHumidityPercentage' not implemented")

        def getWaterTankLevel(self, current=None):
            raise NotImplementedError("servant method 'getWaterTankLevel' not implemented")

        def refillTank(self, current=None):
            raise NotImplementedError("servant method 'refillTank' not implemented")

        def turnOnHumidifierMode(self, current=None):
            raise NotImplementedError("servant method 'turnOnHumidifierMode' not implemented")

        def turnOffHumidifierMode(self, current=None):
            raise NotImplementedError("servant method 'turnOffHumidifierMode' not implemented")

        def isHumidifierTurnedOn(self, current=None):
            raise NotImplementedError("servant method 'isHumidifierTurnedOn' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_airPurifierController._t_AirPurifierWithHumidifierDisp)

        __repr__ = __str__

    _M_airPurifierController._t_AirPurifierWithHumidifierDisp = IcePy.defineClass('::airPurifierController::AirPurifierWithHumidifier', AirPurifierWithHumidifier, (), None, (_M_airPurifierController._t_AirPurifierDisp,))
    AirPurifierWithHumidifier._ice_type = _M_airPurifierController._t_AirPurifierWithHumidifierDisp

    AirPurifierWithHumidifier._op_getHumidityPercentage = IcePy.Operation('getHumidityPercentage', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), (_M_airPurifierController._t_TurnedOffException,))
    AirPurifierWithHumidifier._op_getWaterTankLevel = IcePy.Operation('getWaterTankLevel', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    AirPurifierWithHumidifier._op_refillTank = IcePy.Operation('refillTank', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())
    AirPurifierWithHumidifier._op_turnOnHumidifierMode = IcePy.Operation('turnOnHumidifierMode', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, (_M_airPurifierController._t_EmptyWaterTankException,))
    AirPurifierWithHumidifier._op_turnOffHumidifierMode = IcePy.Operation('turnOffHumidifierMode', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())
    AirPurifierWithHumidifier._op_isHumidifierTurnedOn = IcePy.Operation('isHumidifierTurnedOn', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())

    _M_airPurifierController.AirPurifierWithHumidifier = AirPurifierWithHumidifier
    del AirPurifierWithHumidifier

# End of module airPurifierController
