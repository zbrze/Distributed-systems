# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.7
#
# <auto-generated>
#
# Generated from file `thermostat.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module thermostatController
_M_thermostatController = Ice.openModule('thermostatController')
__name__ = 'thermostatController'

if 'dayOfWeek' not in _M_thermostatController.__dict__:
    _M_thermostatController.dayOfWeek = Ice.createTempClass()
    class dayOfWeek(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    dayOfWeek.MONDAY = dayOfWeek("MONDAY", 0)
    dayOfWeek.TUESDAY = dayOfWeek("TUESDAY", 1)
    dayOfWeek.WEDNESDAY = dayOfWeek("WEDNESDAY", 2)
    dayOfWeek.THURSDAY = dayOfWeek("THURSDAY", 3)
    dayOfWeek.FRIDAY = dayOfWeek("FRIDAY", 4)
    dayOfWeek.SATURDAY = dayOfWeek("SATURDAY", 5)
    dayOfWeek.SUNDAY = dayOfWeek("SUNDAY", 6)
    dayOfWeek._enumerators = { 0:dayOfWeek.MONDAY, 1:dayOfWeek.TUESDAY, 2:dayOfWeek.WEDNESDAY, 3:dayOfWeek.THURSDAY, 4:dayOfWeek.FRIDAY, 5:dayOfWeek.SATURDAY, 6:dayOfWeek.SUNDAY }

    _M_thermostatController._t_dayOfWeek = IcePy.defineEnum('::thermostatController::dayOfWeek', dayOfWeek, (), dayOfWeek._enumerators)

    _M_thermostatController.dayOfWeek = dayOfWeek
    del dayOfWeek

if 'HourSchedule' not in _M_thermostatController.__dict__:
    _M_thermostatController.HourSchedule = Ice.createTempClass()
    class HourSchedule(object):
        def __init__(self, temperature=0.0, hour=0):
            self.temperature = temperature
            self.hour = hour

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_thermostatController.HourSchedule):
                return NotImplemented
            else:
                if self.temperature != other.temperature:
                    return False
                if self.hour != other.hour:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_thermostatController._t_HourSchedule)

        __repr__ = __str__

    _M_thermostatController._t_HourSchedule = IcePy.defineStruct('::thermostatController::HourSchedule', HourSchedule, (), (
        ('temperature', (), IcePy._t_float),
        ('hour', (), IcePy._t_int)
    ))

    _M_thermostatController.HourSchedule = HourSchedule
    del HourSchedule

if '_t_hoursSchedule' not in _M_thermostatController.__dict__:
    _M_thermostatController._t_hoursSchedule = IcePy.defineSequence('::thermostatController::hoursSchedule', (), _M_thermostatController._t_HourSchedule)

if 'DaySchedule' not in _M_thermostatController.__dict__:
    _M_thermostatController.DaySchedule = Ice.createTempClass()
    class DaySchedule(object):
        def __init__(self, day=_M_thermostatController.dayOfWeek.MONDAY, hoursSchedule=None):
            self.day = day
            self.hoursSchedule = hoursSchedule

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_thermostatController.DaySchedule):
                return NotImplemented
            else:
                if self.day != other.day:
                    return False
                if self.hoursSchedule != other.hoursSchedule:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_thermostatController._t_DaySchedule)

        __repr__ = __str__

    _M_thermostatController._t_DaySchedule = IcePy.defineStruct('::thermostatController::DaySchedule', DaySchedule, (), (
        ('day', (), _M_thermostatController._t_dayOfWeek),
        ('hoursSchedule', (), _M_thermostatController._t_hoursSchedule)
    ))

    _M_thermostatController.DaySchedule = DaySchedule
    del DaySchedule

if 'NoInputException' not in _M_thermostatController.__dict__:
    _M_thermostatController.NoInputException = Ice.createTempClass()
    class NoInputException(Ice.UserException):
        def __init__(self, reason="no hours schedule provided"):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::thermostatController::NoInputException'

    _M_thermostatController._t_NoInputException = IcePy.defineException('::thermostatController::NoInputException', NoInputException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    NoInputException._ice_type = _M_thermostatController._t_NoInputException

    _M_thermostatController.NoInputException = NoInputException
    del NoInputException

if 'IncorrectHourException' not in _M_thermostatController.__dict__:
    _M_thermostatController.IncorrectHourException = Ice.createTempClass()
    class IncorrectHourException(Ice.UserException):
        def __init__(self, reason="provided hour should be in range 0-23"):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::thermostatController::IncorrectHourException'

    _M_thermostatController._t_IncorrectHourException = IcePy.defineException('::thermostatController::IncorrectHourException', IncorrectHourException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    IncorrectHourException._ice_type = _M_thermostatController._t_IncorrectHourException

    _M_thermostatController.IncorrectHourException = IncorrectHourException
    del IncorrectHourException

if '_t_weekSchedule' not in _M_thermostatController.__dict__:
    _M_thermostatController._t_weekSchedule = IcePy.defineSequence('::thermostatController::weekSchedule', (), _M_thermostatController._t_DaySchedule)

if 'temperatureUnits' not in _M_thermostatController.__dict__:
    _M_thermostatController.temperatureUnits = Ice.createTempClass()
    class temperatureUnits(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    temperatureUnits.C = temperatureUnits("C", 0)
    temperatureUnits.K = temperatureUnits("K", 1)
    temperatureUnits.F = temperatureUnits("F", 2)
    temperatureUnits._enumerators = { 0:temperatureUnits.C, 1:temperatureUnits.K, 2:temperatureUnits.F }

    _M_thermostatController._t_temperatureUnits = IcePy.defineEnum('::thermostatController::temperatureUnits', temperatureUnits, (), temperatureUnits._enumerators)

    _M_thermostatController.temperatureUnits = temperatureUnits
    del temperatureUnits

_M_thermostatController._t_Thermostat = IcePy.defineValue('::thermostatController::Thermostat', Ice.Value, -1, (), False, True, None, ())

if 'ThermostatPrx' not in _M_thermostatController.__dict__:
    _M_thermostatController.ThermostatPrx = Ice.createTempClass()
    class ThermostatPrx(Ice.ObjectPrx):

        def getCurrentTemperature(self, context=None):
            return _M_thermostatController.Thermostat._op_getCurrentTemperature.invoke(self, ((), context))

        def getCurrentTemperatureAsync(self, context=None):
            return _M_thermostatController.Thermostat._op_getCurrentTemperature.invokeAsync(self, ((), context))

        def begin_getCurrentTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_thermostatController.Thermostat._op_getCurrentTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getCurrentTemperature(self, _r):
            return _M_thermostatController.Thermostat._op_getCurrentTemperature.end(self, _r)

        def getWeekSchedule(self, context=None):
            return _M_thermostatController.Thermostat._op_getWeekSchedule.invoke(self, ((), context))

        def getWeekScheduleAsync(self, context=None):
            return _M_thermostatController.Thermostat._op_getWeekSchedule.invokeAsync(self, ((), context))

        def begin_getWeekSchedule(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_thermostatController.Thermostat._op_getWeekSchedule.begin(self, ((), _response, _ex, _sent, context))

        def end_getWeekSchedule(self, _r):
            return _M_thermostatController.Thermostat._op_getWeekSchedule.end(self, _r)

        def getDaySchedule(self, day, context=None):
            return _M_thermostatController.Thermostat._op_getDaySchedule.invoke(self, ((day, ), context))

        def getDayScheduleAsync(self, day, context=None):
            return _M_thermostatController.Thermostat._op_getDaySchedule.invokeAsync(self, ((day, ), context))

        def begin_getDaySchedule(self, day, _response=None, _ex=None, _sent=None, context=None):
            return _M_thermostatController.Thermostat._op_getDaySchedule.begin(self, ((day, ), _response, _ex, _sent, context))

        def end_getDaySchedule(self, _r):
            return _M_thermostatController.Thermostat._op_getDaySchedule.end(self, _r)

        def getTemperatureScheduledForHour(self, day, hour, context=None):
            return _M_thermostatController.Thermostat._op_getTemperatureScheduledForHour.invoke(self, ((day, hour), context))

        def getTemperatureScheduledForHourAsync(self, day, hour, context=None):
            return _M_thermostatController.Thermostat._op_getTemperatureScheduledForHour.invokeAsync(self, ((day, hour), context))

        def begin_getTemperatureScheduledForHour(self, day, hour, _response=None, _ex=None, _sent=None, context=None):
            return _M_thermostatController.Thermostat._op_getTemperatureScheduledForHour.begin(self, ((day, hour), _response, _ex, _sent, context))

        def end_getTemperatureScheduledForHour(self, _r):
            return _M_thermostatController.Thermostat._op_getTemperatureScheduledForHour.end(self, _r)

        def scheduleTemperatureForHour(self, day, temperature, hour, context=None):
            return _M_thermostatController.Thermostat._op_scheduleTemperatureForHour.invoke(self, ((day, temperature, hour), context))

        def scheduleTemperatureForHourAsync(self, day, temperature, hour, context=None):
            return _M_thermostatController.Thermostat._op_scheduleTemperatureForHour.invokeAsync(self, ((day, temperature, hour), context))

        def begin_scheduleTemperatureForHour(self, day, temperature, hour, _response=None, _ex=None, _sent=None, context=None):
            return _M_thermostatController.Thermostat._op_scheduleTemperatureForHour.begin(self, ((day, temperature, hour), _response, _ex, _sent, context))

        def end_scheduleTemperatureForHour(self, _r):
            return _M_thermostatController.Thermostat._op_scheduleTemperatureForHour.end(self, _r)

        def scheduleTemperatureForDay(self, day, hoursSchedule, context=None):
            return _M_thermostatController.Thermostat._op_scheduleTemperatureForDay.invoke(self, ((day, hoursSchedule), context))

        def scheduleTemperatureForDayAsync(self, day, hoursSchedule, context=None):
            return _M_thermostatController.Thermostat._op_scheduleTemperatureForDay.invokeAsync(self, ((day, hoursSchedule), context))

        def begin_scheduleTemperatureForDay(self, day, hoursSchedule, _response=None, _ex=None, _sent=None, context=None):
            return _M_thermostatController.Thermostat._op_scheduleTemperatureForDay.begin(self, ((day, hoursSchedule), _response, _ex, _sent, context))

        def end_scheduleTemperatureForDay(self, _r):
            return _M_thermostatController.Thermostat._op_scheduleTemperatureForDay.end(self, _r)

        def setCurrentTemperature(self, temperature, context=None):
            return _M_thermostatController.Thermostat._op_setCurrentTemperature.invoke(self, ((temperature, ), context))

        def setCurrentTemperatureAsync(self, temperature, context=None):
            return _M_thermostatController.Thermostat._op_setCurrentTemperature.invokeAsync(self, ((temperature, ), context))

        def begin_setCurrentTemperature(self, temperature, _response=None, _ex=None, _sent=None, context=None):
            return _M_thermostatController.Thermostat._op_setCurrentTemperature.begin(self, ((temperature, ), _response, _ex, _sent, context))

        def end_setCurrentTemperature(self, _r):
            return _M_thermostatController.Thermostat._op_setCurrentTemperature.end(self, _r)

        def changeUnit(self, unit, context=None):
            return _M_thermostatController.Thermostat._op_changeUnit.invoke(self, ((unit, ), context))

        def changeUnitAsync(self, unit, context=None):
            return _M_thermostatController.Thermostat._op_changeUnit.invokeAsync(self, ((unit, ), context))

        def begin_changeUnit(self, unit, _response=None, _ex=None, _sent=None, context=None):
            return _M_thermostatController.Thermostat._op_changeUnit.begin(self, ((unit, ), _response, _ex, _sent, context))

        def end_changeUnit(self, _r):
            return _M_thermostatController.Thermostat._op_changeUnit.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_thermostatController.ThermostatPrx.ice_checkedCast(proxy, '::thermostatController::Thermostat', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_thermostatController.ThermostatPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::thermostatController::Thermostat'
    _M_thermostatController._t_ThermostatPrx = IcePy.defineProxy('::thermostatController::Thermostat', ThermostatPrx)

    _M_thermostatController.ThermostatPrx = ThermostatPrx
    del ThermostatPrx

    _M_thermostatController.Thermostat = Ice.createTempClass()
    class Thermostat(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::thermostatController::Thermostat')

        def ice_id(self, current=None):
            return '::thermostatController::Thermostat'

        @staticmethod
        def ice_staticId():
            return '::thermostatController::Thermostat'

        def getCurrentTemperature(self, current=None):
            raise NotImplementedError("servant method 'getCurrentTemperature' not implemented")

        def getWeekSchedule(self, current=None):
            raise NotImplementedError("servant method 'getWeekSchedule' not implemented")

        def getDaySchedule(self, day, current=None):
            raise NotImplementedError("servant method 'getDaySchedule' not implemented")

        def getTemperatureScheduledForHour(self, day, hour, current=None):
            raise NotImplementedError("servant method 'getTemperatureScheduledForHour' not implemented")

        def scheduleTemperatureForHour(self, day, temperature, hour, current=None):
            raise NotImplementedError("servant method 'scheduleTemperatureForHour' not implemented")

        def scheduleTemperatureForDay(self, day, hoursSchedule, current=None):
            raise NotImplementedError("servant method 'scheduleTemperatureForDay' not implemented")

        def setCurrentTemperature(self, temperature, current=None):
            raise NotImplementedError("servant method 'setCurrentTemperature' not implemented")

        def changeUnit(self, unit, current=None):
            raise NotImplementedError("servant method 'changeUnit' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_thermostatController._t_ThermostatDisp)

        __repr__ = __str__

    _M_thermostatController._t_ThermostatDisp = IcePy.defineClass('::thermostatController::Thermostat', Thermostat, (), None, ())
    Thermostat._ice_type = _M_thermostatController._t_ThermostatDisp

    Thermostat._op_getCurrentTemperature = IcePy.Operation('getCurrentTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Thermostat._op_getWeekSchedule = IcePy.Operation('getWeekSchedule', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_thermostatController._t_weekSchedule, False, 0), ())
    Thermostat._op_getDaySchedule = IcePy.Operation('getDaySchedule', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_thermostatController._t_dayOfWeek, False, 0),), (), ((), _M_thermostatController._t_DaySchedule, False, 0), ())
    Thermostat._op_getTemperatureScheduledForHour = IcePy.Operation('getTemperatureScheduledForHour', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_thermostatController._t_dayOfWeek, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_float, False, 0), (_M_thermostatController._t_IncorrectHourException,))
    Thermostat._op_scheduleTemperatureForHour = IcePy.Operation('scheduleTemperatureForHour', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_thermostatController._t_dayOfWeek, False, 0), ((), IcePy._t_float, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_thermostatController._t_IncorrectHourException,))
    Thermostat._op_scheduleTemperatureForDay = IcePy.Operation('scheduleTemperatureForDay', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_thermostatController._t_dayOfWeek, False, 0), ((), _M_thermostatController._t_hoursSchedule, False, 0)), (), None, (_M_thermostatController._t_NoInputException, _M_thermostatController._t_IncorrectHourException))
    Thermostat._op_setCurrentTemperature = IcePy.Operation('setCurrentTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, ())
    Thermostat._op_changeUnit = IcePy.Operation('changeUnit', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_thermostatController._t_temperatureUnits, False, 0),), (), None, ())

    _M_thermostatController.Thermostat = Thermostat
    del Thermostat

# End of module thermostatController
