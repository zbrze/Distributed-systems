# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.7
#
# <auto-generated>
#
# Generated from file `flowerpot.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module flowerpotController
_M_flowerpotController = Ice.openModule('flowerpotController')
__name__ = 'flowerpotController'

if 'lightPowerLevel' not in _M_flowerpotController.__dict__:
    _M_flowerpotController.lightPowerLevel = Ice.createTempClass()
    class lightPowerLevel(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    lightPowerLevel.LOW = lightPowerLevel("LOW", 0)
    lightPowerLevel.MEDIUM = lightPowerLevel("MEDIUM", 1)
    lightPowerLevel.HIGH = lightPowerLevel("HIGH", 2)
    lightPowerLevel._enumerators = { 0:lightPowerLevel.LOW, 1:lightPowerLevel.MEDIUM, 2:lightPowerLevel.HIGH }

    _M_flowerpotController._t_lightPowerLevel = IcePy.defineEnum('::flowerpotController::lightPowerLevel', lightPowerLevel, (), lightPowerLevel._enumerators)

    _M_flowerpotController.lightPowerLevel = lightPowerLevel
    del lightPowerLevel

if 'OverwaterError' not in _M_flowerpotController.__dict__:
    _M_flowerpotController.OverwaterError = Ice.createTempClass()
    class OverwaterError(Ice.UserException):
        def __init__(self, reason="your plant is literally swimming"):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::flowerpotController::OverwaterError'

    _M_flowerpotController._t_OverwaterError = IcePy.defineException('::flowerpotController::OverwaterError', OverwaterError, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    OverwaterError._ice_type = _M_flowerpotController._t_OverwaterError

    _M_flowerpotController.OverwaterError = OverwaterError
    del OverwaterError

if 'OverdryError' not in _M_flowerpotController.__dict__:
    _M_flowerpotController.OverdryError = Ice.createTempClass()
    class OverdryError(Ice.UserException):
        def __init__(self, reason="your plant is literally swimming"):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::flowerpotController::OverdryError'

    _M_flowerpotController._t_OverdryError = IcePy.defineException('::flowerpotController::OverdryError', OverdryError, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    OverdryError._ice_type = _M_flowerpotController._t_OverdryError

    _M_flowerpotController.OverdryError = OverdryError
    del OverdryError

_M_flowerpotController._t_Flowerpot = IcePy.defineValue('::flowerpotController::Flowerpot', Ice.Value, -1, (), False, True, None, ())

if 'FlowerpotPrx' not in _M_flowerpotController.__dict__:
    _M_flowerpotController.FlowerpotPrx = Ice.createTempClass()
    class FlowerpotPrx(Ice.ObjectPrx):

        def getCurrentHumidity(self, context=None):
            return _M_flowerpotController.Flowerpot._op_getCurrentHumidity.invoke(self, ((), context))

        def getCurrentHumidityAsync(self, context=None):
            return _M_flowerpotController.Flowerpot._op_getCurrentHumidity.invokeAsync(self, ((), context))

        def begin_getCurrentHumidity(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_flowerpotController.Flowerpot._op_getCurrentHumidity.begin(self, ((), _response, _ex, _sent, context))

        def end_getCurrentHumidity(self, _r):
            return _M_flowerpotController.Flowerpot._op_getCurrentHumidity.end(self, _r)

        def water(self, mililiters, context=None):
            return _M_flowerpotController.Flowerpot._op_water.invoke(self, ((mililiters, ), context))

        def waterAsync(self, mililiters, context=None):
            return _M_flowerpotController.Flowerpot._op_water.invokeAsync(self, ((mililiters, ), context))

        def begin_water(self, mililiters, _response=None, _ex=None, _sent=None, context=None):
            return _M_flowerpotController.Flowerpot._op_water.begin(self, ((mililiters, ), _response, _ex, _sent, context))

        def end_water(self, _r):
            return _M_flowerpotController.Flowerpot._op_water.end(self, _r)

        def getCurrentLightPowerLevel(self, context=None):
            return _M_flowerpotController.Flowerpot._op_getCurrentLightPowerLevel.invoke(self, ((), context))

        def getCurrentLightPowerLevelAsync(self, context=None):
            return _M_flowerpotController.Flowerpot._op_getCurrentLightPowerLevel.invokeAsync(self, ((), context))

        def begin_getCurrentLightPowerLevel(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_flowerpotController.Flowerpot._op_getCurrentLightPowerLevel.begin(self, ((), _response, _ex, _sent, context))

        def end_getCurrentLightPowerLevel(self, _r):
            return _M_flowerpotController.Flowerpot._op_getCurrentLightPowerLevel.end(self, _r)

        def setLightPowerLeveL(self, powerLevel, context=None):
            return _M_flowerpotController.Flowerpot._op_setLightPowerLeveL.invoke(self, ((powerLevel, ), context))

        def setLightPowerLeveLAsync(self, powerLevel, context=None):
            return _M_flowerpotController.Flowerpot._op_setLightPowerLeveL.invokeAsync(self, ((powerLevel, ), context))

        def begin_setLightPowerLeveL(self, powerLevel, _response=None, _ex=None, _sent=None, context=None):
            return _M_flowerpotController.Flowerpot._op_setLightPowerLeveL.begin(self, ((powerLevel, ), _response, _ex, _sent, context))

        def end_setLightPowerLeveL(self, _r):
            return _M_flowerpotController.Flowerpot._op_setLightPowerLeveL.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_flowerpotController.FlowerpotPrx.ice_checkedCast(proxy, '::flowerpotController::Flowerpot', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_flowerpotController.FlowerpotPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::flowerpotController::Flowerpot'
    _M_flowerpotController._t_FlowerpotPrx = IcePy.defineProxy('::flowerpotController::Flowerpot', FlowerpotPrx)

    _M_flowerpotController.FlowerpotPrx = FlowerpotPrx
    del FlowerpotPrx

    _M_flowerpotController.Flowerpot = Ice.createTempClass()
    class Flowerpot(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::flowerpotController::Flowerpot')

        def ice_id(self, current=None):
            return '::flowerpotController::Flowerpot'

        @staticmethod
        def ice_staticId():
            return '::flowerpotController::Flowerpot'

        def getCurrentHumidity(self, current=None):
            raise NotImplementedError("servant method 'getCurrentHumidity' not implemented")

        def water(self, mililiters, current=None):
            raise NotImplementedError("servant method 'water' not implemented")

        def getCurrentLightPowerLevel(self, current=None):
            raise NotImplementedError("servant method 'getCurrentLightPowerLevel' not implemented")

        def setLightPowerLeveL(self, powerLevel, current=None):
            raise NotImplementedError("servant method 'setLightPowerLeveL' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_flowerpotController._t_FlowerpotDisp)

        __repr__ = __str__

    _M_flowerpotController._t_FlowerpotDisp = IcePy.defineClass('::flowerpotController::Flowerpot', Flowerpot, (), None, ())
    Flowerpot._ice_type = _M_flowerpotController._t_FlowerpotDisp

    Flowerpot._op_getCurrentHumidity = IcePy.Operation('getCurrentHumidity', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    Flowerpot._op_water = IcePy.Operation('water', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_flowerpotController._t_OverwaterError,))
    Flowerpot._op_getCurrentLightPowerLevel = IcePy.Operation('getCurrentLightPowerLevel', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_flowerpotController._t_lightPowerLevel, False, 0), ())
    Flowerpot._op_setLightPowerLeveL = IcePy.Operation('setLightPowerLeveL', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_flowerpotController._t_lightPowerLevel, False, 0),), (), None, (_M_flowerpotController._t_OverdryError,))

    _M_flowerpotController.Flowerpot = Flowerpot
    del Flowerpot

# End of module flowerpotController
