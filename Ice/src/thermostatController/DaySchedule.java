//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `thermostat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package thermostatController;

public class DaySchedule implements java.lang.Cloneable,
                                    java.io.Serializable
{
    public dayOfWeek day;

    public HourSchedule[] hoursSchedule;

    public DaySchedule()
    {
        this.day = dayOfWeek.MONDAY;
    }

    public DaySchedule(dayOfWeek day, HourSchedule[] hoursSchedule)
    {
        this.day = day;
        this.hoursSchedule = hoursSchedule;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DaySchedule r = null;
        if(rhs instanceof DaySchedule)
        {
            r = (DaySchedule)rhs;
        }

        if(r != null)
        {
            if(this.day != r.day)
            {
                if(this.day == null || r.day == null || !this.day.equals(r.day))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(this.hoursSchedule, r.hoursSchedule))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::thermostatController::DaySchedule");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, day);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, hoursSchedule);
        return h_;
    }

    public DaySchedule clone()
    {
        DaySchedule c = null;
        try
        {
            c = (DaySchedule)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        dayOfWeek.ice_write(ostr, this.day);
        hoursScheduleHelper.write(ostr, this.hoursSchedule);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.day = dayOfWeek.ice_read(istr);
        this.hoursSchedule = hoursScheduleHelper.read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, DaySchedule v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public DaySchedule ice_read(com.zeroc.Ice.InputStream istr)
    {
        DaySchedule v = new DaySchedule();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<DaySchedule> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, DaySchedule v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<DaySchedule> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(DaySchedule.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final DaySchedule _nullMarshalValue = new DaySchedule();

    /** @hidden */
    public static final long serialVersionUID = 6177733340479513215L;
}
